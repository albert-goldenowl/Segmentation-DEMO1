import tensorflow as tf
input = tf.keras.layers.Input(shape=(256, 256, 3))
conv = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(input)
conv1 = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(conv)
pool = tf.keras.layers.MaxPooling2D((2, 2))(conv)
conv = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(pool)
conv2 = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(conv)
pool = tf.keras.layers.MaxPooling2D((2, 2))(conv)
conv = tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu')(pool)
conv3 = tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu')(conv)
pool = tf.keras.layers.MaxPooling2D((2, 2))(conv)
conv = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu')(pool)
conv4 = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu', name='conv4')(conv)
pool = tf.keras.layers.MaxPooling2D((2, 2))(conv)
conv = tf.keras.layers.Conv2D(1024, (3, 3), padding='same', activation='relu')(pool)
conv = tf.keras.layers.Conv2D(1024, (3, 3), padding='same', activation='relu')(conv)
#Upsample
deconv1 = tf.keras.layers.Conv2DTranspose(512, (2, 2), padding='same', strides=2)(conv)
concat1 = tf.keras.layers.concatenate([conv4, deconv1])
conv = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu')(concat1)
conv = tf.keras.layers.Conv2D(512, (3, 3), padding='same', activation='relu')(conv)
deconv2 = tf.keras.layers.Conv2DTranspose(256, (2, 2), padding='same', strides=2)(conv)
concat2 = tf.keras.layers.concatenate([conv3, deconv2])
conv = tf.keras.layers.Conv2D(256, (3, 3), padding='same', activation='relu')(concat2)
conv = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(conv)

deconv3 = tf.keras.layers.Conv2DTranspose(128, (3, 3), padding='same', strides=2, activation='relu')(conv)
concat3 = tf.keras.layers.concatenate([conv2, deconv3])
conv = tf.keras.layers.Conv2D(128, (3, 3), padding='same', activation='relu')(concat3)
conv = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(conv)
deconv4 = tf.keras.layers.Conv2DTranspose(64, (3, 3), padding='same', strides=2, activation='relu')(conv)

concat4 = tf.keras.layers.concatenate([conv1, deconv4])
conv = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(concat4)
conv = tf.keras.layers.Conv2D(64, (3, 3), padding='same', activation='relu')(conv)
output = tf.keras.layers.Conv2D(5, (1, 1), padding='same', activation=None)(conv)

model = tf.keras.Model(input, output)
